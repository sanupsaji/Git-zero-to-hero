________________________________________
Git: A Version Control Tool
Git is a distributed version control system that tracks changes in files and allows multiple people to collaborate on projects. It enables the management of changes over time, allowing developers to work on code efficiently.
________________________________________
Life Cycle of Git
The life cycle of Git revolves around various states that files move through as they are created, modified, staged, and committed.
________________________________________
Installing Git on Ubuntu (Linux)
To install Git on any Ubuntu system:
sudo apt update
sudo apt install git -y
Note: The installation command may vary slightly for different Linux distributions (e.g., yum or dnf on Fedora/RHEL).
________________________________________
git init Command
The git init command initializes a new Git repository in an existing directory. When you run git init, Git sets up the directory to be tracked as a Git repository.
What git init Does:
1.	Creates a .git Directory:
o	When you run git init in a directory, Git creates a hidden .git directory. This directory contains all the necessary information about the repository, including: 
	Configuration settings (such as user info, remote repository URLs).
	Staging area (index) for files that are ready to be committed.
	Commit history, including branches, tags, and commit data.
	References to remote repositories (if connected to a remote, like GitHub or GitLab).
o	This .git directory is what turns the folder into a Git-managed repository.
2.	Prepares the Directory for Version Control:
o	After running git init, the folder is now being tracked by Git, meaning Git can track file changes, revisions, and commit history.
3.	Ready to Start Adding Files:
o	The directory is now ready to start tracking files. You can add files using git add and commit them using git commit.
4.	Start Tracking Changes:
o	Once the repository is initialized, you can start adding and committing changes to the repository. You would typically use git add to add files to the staging area, and git commit to commit those changes to the local repository.
________________________________________
Typical Workflow with git init:
Here’s a typical workflow after running git init:
1.	Initialize a New Repository:
o	Create a new directory and navigate into it:
o	mkdir my-project
o	cd my-project
o	Initialize the repository:
o	git init
2.	Add Files to the Repository:
o	Now, create or move files into the repository directory. After that, use git add to stage them for commit: 
o	touch README.md
o	git add README.md
3.	Commit Changes:
o	After staging the files, commit them to the repository: 
o	git commit -m "Initial commit"
________________________________________
If You’re Adding Git to an Existing Project:
If you have an existing project and want to start tracking it with Git:
1.	Navigate to your project directory:
2.	cd /path/to/your/existing/project
3.	Run the git init command:
4.	git init
5.	After that, you can start adding and committing files just as you would with a newly initialized repository.
________________________________________
Summary:
•	git init initializes a new Git repository in the current directory.
•	It creates a .git directory, where Git stores all metadata related to the repository (such as configuration settings, commit history, etc.).
•	After initialization, you can begin adding files (git add) and committing changes (git commit).
•	Git is now ready to track changes and manage your project's version history.
________________________________________
